The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
------------------------

This is an example text file reStructuredText format.  First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

a 2x3 matrix:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3) 
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

a 3x3 matrix:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [9, 10, 11]], 3) 
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [3.0, 3.33, 3.67]]

a matrix with unequal rows:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [9, 10]], 3) 
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

a string instead of a matrix:

    >>> matrix_divided("string", 3)                        
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists)             of integers/floats

dividing the matrix by 0:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0) 
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

dividing by a string instead of a number:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "string") 
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

returns a new matrix:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided 
    >>> my_matrix = [[1, 2, 3], [4, 5, 6]]
    >>> new_matrix = matrix_divided(my_matrix, 2)                    
    >>> my_matrix == new_matrix
    False
