the ``7-base_geometry`` module
==============================

Using ``BaseGeometry``
----------------------

This is an example text file in reStructuedText format.  First import
``BaseGeometry`` from ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

create a BaseGeometry object:

    >>> my_base_geometery = BaseGeometry()

test the area method:

    >>> my_base_geometery.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

testing integer_validator method with name (str) and value (int):

    >>> my_base_geometery.integer_validator("width", 89) 
    >>> my_base_geometery.integer_validator("age", 29)   

testing integer_validator method with name (str) and value (str):

    >>> my_base_geometery.integer_validator("language", "Python") 
    Traceback (most recent call last):
        ...
    TypeError: language must be an integer

testing integer_validator method with negative value:

    >>> my_base_geometery.integer_validator("value", -9)          
    Traceback (most recent call last):
        ...
    ValueError: value must be greater than 0

testing integer_validator method with float value:

    >>> my_base_geometery.integer_validator("value", 7.98)       
    Traceback (most recent call last):
        ...
    TypeError: value must be an integer

Checking for non-integer types:
	 >>> my_base_geometery.integer_validator("bool", True)
	 Traceback (most recent call last):
         ...
         TypeError: bool must be an integer
	 >>> my_base_geometery.integer_validator("float", 1.5)
         Traceback (most recent call last):
         ...
         TypeError: float must be an integer
	 >>> my_base_geometery.integer_validator("complex", complex(1, 1))
         Traceback (most recent call last):
         ...
         TypeError: complex must be an integer
	 >>> my_base_geometery.integer_validator("string", "hello")
         Traceback (most recent call last):
         ...
         TypeError: string must be an integer
	 >>> my_base_geometery.integer_validator("tuple", (1, 2))
         Traceback (most recent call last):
         ...
         TypeError: tuple must be an integer
	 >>> my_base_geometery.integer_validator("list", [1, 2, 3])
	 Traceback (most recent call last):
         ...
         TypeError: list must be an integer
	 >>> my_base_geometery.integer_validator("dict", {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: dict must be an integer
	 >>> my_base_geometery.integer_validator("set", {"hello", "world"})
         Traceback (most recent call last):
         ...
         TypeError: set must be an integer
	 >>> my_base_geometery.integer_validator("frozenset", frozenset(["hello", "world"]))
         Traceback (most recent call last):
         ...
         TypeError: frozenset must be an integer
	 >>> my_base_geometery.integer_validator("bytes", b"bytes")
         Traceback (most recent call last):
         ...
         TypeError: bytes must be an integer
	 >>> my_base_geometery.integer_validator("bytearrays", bytearray(b"bytes"))
         Traceback (most recent call last):
         ...
         TypeError: bytearrays must be an integer

testing integer_validator method with one argument:

    >>> my_base_geometery.integer_validator("value")     
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 7-base_geometry.txt[8]>", line 1, in <module>
        my_base_geometery.integer_validator("value")
    TypeError: integer_validator() missing 1 required positional argument: 'value'

testing integer_validator method with no argument:

    >>> my_base_geometery.integer_validator()        
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 7-base_geometry.txt[9]>", line 1, in <module>
        my_base_geometery.integer_validator()
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for too many arguments:
	 >>> my_base_geometery.integer_validator("integer", 1, 2)
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() takes 3 positional arguments but 4 were given
